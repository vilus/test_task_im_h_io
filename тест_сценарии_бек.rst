0. Подготовка

  * 0.1. Подготовить http клиент

1. HTTP часть

  * 1.1. Валидные запросы
      * 1.1.1. User-Agent под desktop
          * 1.1.1.1. С параметром "user_action"
          * 1.1.1.2. С параметром "user_action" и пустым "feedback"
          * 1.1.1.3. С параметром "user_action" и "feedback"

      * 1.1.2. User_Agent под mobile
          * 1.1.2.1. С параметром "user_action"
          * 1.1.2.2. С параметром "user_action" и пустым "feedback"
          * 1.1.2.3. С параметром "user_action" и "feedback"

      * 1.1.3. С пустым/без User-Agent (Под вопросом)

  * 1.2. Невалидные запросы
      * 1.2.1. User-Agent под desktop
          * 1.2.1.1. Без обязательного параметра "user_action"
          * 1.2.1.2. С дополнительным случайным полем
          * 1.2.1.3. С невалидным параметром "user_action" (уточнить по ТЗ)
              * 1.2.1.3.1. Невалидное значение
              * 1.2.1.3.2. Невалидный тип
          * 1.2.1.4. С невалидным параметром "feedback" (уточнить по ТЗ)
              * 1.2.1.4.1. Невалидное значение
              * 1.2.1.4.2. Невалидный тип
          * 1.2.1.5. Без параметров

      * 1.2.2. User_Agent под mobile
          * 1.2.2.1. Без обязательного параметра "user_action"
          * 1.2.2.2. С дополнительным случайным полем
          * 1.2.2.3. С невалидным параметром "user_action" (уточнить по ТЗ)
              * 1.2.2.3.1. Невалидное значение
              * 1.2.2.3.2. Невалидный тип
          * 1.2.2.4. С невалидным параметром "feedback" (уточнить по ТЗ)
              * 1.2.2.4.1. Невалидное значение
              * 1.2.2.4.2. Невалидный тип
          * 1.2.2.5. Без параметров


2. БД часть

  .. attention:: Не распараллеливать, выполнять на выделенном сервисе (т.е. запросы поступают только от этого сьюта, в "один поток")
  ..
  .. note:: если бы в ответе на успешно обработанном запросе возвращался id, большую часть сьюта можно было бы распараллелить
  ..

  * 2.0. Подготовить PostgreSQL клиент

  * 2.1. Валидные запросы

    .. note:: Сьют 1.1 (HTTP часть / Валидные запросы) без своих проверок, проверки только по бд
    ..

      * 2.1.1. User-Agent под desktop
          * 2.1.1.1. С параметром "user_action"
          * 2.1.1.2. С параметром "user_action" и пустым "feedback"
          * 2.1.1.3. С параметром "user_action" и "feedback"

      * 2.1.2. User_Agent под mobile
          * 2.1.2.1. С параметром "user_action"
          * 2.1.2.2. С параметром "user_action" и пустым "feedback"
          * 2.1.2.3. С параметром "user_action" и "feedback"

      * 2.1.3. С пустым/без User-Agent (Под вопросом)

  * 2.2. Невалидные запросы

    .. note:: Сьют 1.2 (HTTP часть / Невалидные запросы) без своих проверок, проверки только по бд
    ..

      * 2.2.1. User-Agent под desktop
          * 2.2.1.1. Без обязательного параметра "user_action"
          * 2.2.1.2. С дополнительным случайным полем
          * 2.2.1.3. С невалидным параметром "user_action" (уточнить по ТЗ)
              * 2.2.1.3.1. Невалидное значение
              * 2.2.1.3.2. Невалидный тип
          * 2.2.1.4. С невалидным параметром "feedback" (уточнить по ТЗ)
              * 2.2.1.4.1. Невалидное значение
              * 2.2.1.4.2. Невалидный тип
          * 2.2.1.5. Без параметров

      * 2.2.2. User_Agent под mobile
          * 2.2.2.1. Без обязательного параметра "user_action"
          * 2.2.2.2. С дополнительным случайным полем
          * 2.2.2.3. С невалидным параметром "user_action" (уточнить по ТЗ)
              * 2.2.2.3.1. Невалидное значение
              * 2.2.2.3.2. Невалидный тип
          * 2.2.2.4. С невалидным параметром "feedback" (уточнить по ТЗ)
              * 2.2.2.4.1. Невалидное значение
              * 2.2.2.4.2. Невалидный тип
          * 2.2.2.5. Без параметров

  * 2.3. Ограничения (на чистой базе и перезапущенном сервисе)
      * 2.3.1. Два валидных запроса с одинаковым "user_action"
      * 2.3.2. Два валидных запроса с одинаковыми "user_action" и "feedback"

----

TODO
