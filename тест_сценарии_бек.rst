0. Подготовка

  * 0.1. Подготовить http клиент

1. HTTP часть

  * 1.1. Валидные запросы
      * 1.1.1. User-Agent под desktop
          * 1.1.1.1. С параметром "user_action"
          * 1.1.1.2. С параметром "user_action" и пустым "feedback"
          * 1.1.1.3. С параметром "user_action" и "feedback"

      * 1.1.2. User_Agent под mobile
          * 1.1.2.1. С параметром "user_action"
          * 1.1.2.2. С параметром "user_action" и пустым "feedback"
          * 1.1.2.3. С параметром "user_action" и "feedback"

      * 1.1.3. С пустым/без User-Agent (Под вопросом)

  * 1.2. Невалидные запросы
      * 1.2.1. User-Agent под desktop
          * 1.2.1.1. Без обязательного параметра "user_action"
          * 1.2.1.2. С дополнительным случайным полем  (уточнить по ТЗ)
          * 1.2.1.3. С невалидным параметром "user_action" (уточнить по ТЗ)
              * 1.2.1.3.1. Невалидное значение
              * 1.2.1.3.2. Невалидный тип
          * 1.2.1.4. С невалидным параметром "feedback" (уточнить по ТЗ)
              * 1.2.1.4.1. Невалидное значение
              * 1.2.1.4.2. Невалидный тип

      * 1.2.2. User_Agent под mobile
          * 1.2.2.1. Без обязательного параметра "user_action"
          * 1.2.2.2. С дополнительным случайным полем
          * 1.2.2.3. С невалидным параметром "user_action" (уточнить по ТЗ)
              * 1.2.2.3.1. Невалидное значение
              * 1.2.2.3.2. Невалидный тип
          * 1.2.2.4. С невалидным параметром "feedback" (уточнить по ТЗ)
              * 1.2.2.4.1. Невалидное значение
              * 1.2.2.4.2. Невалидный тип

      * 1.2.3. Список ошибок в ответе


2. БД часть

  .. attention:: Не распараллеливать, выполнять на выделенном сервисе (т.е. запросы поступают только от этого сьюта, в "один поток")
  ..
  .. note:: если бы в ответе на успешно обработанном запросе возвращался id, большую часть сьюта можно было бы распараллелить
  ..

  * 2.0. Подготовить PostgreSQL клиент

  * 2.1. Валидные запросы

    .. note:: Сьют 1.1 (HTTP часть / Валидные запросы) без своих проверок, проверки только по бд
    ..

      * 2.1.1. User-Agent под desktop
          * 2.1.1.1. С параметром "user_action"
          * 2.1.1.2. С параметром "user_action" и пустым "feedback"
          * 2.1.1.3. С параметром "user_action" и "feedback"

      * 2.1.2. User_Agent под mobile
          * 2.1.2.1. С параметром "user_action"
          * 2.1.2.2. С параметром "user_action" и пустым "feedback"
          * 2.1.2.3. С параметром "user_action" и "feedback"

      * 2.1.3. С пустым/без User-Agent (Под вопросом)

  * 2.2. Невалидные запросы

    .. note:: Сьют 1.2 (HTTP часть / Невалидные запросы) без своих проверок, проверки только по бд
    ..

      * 2.2.1. User-Agent под desktop
          * 2.2.1.1. Без обязательного параметра "user_action"
          * 2.2.1.2. С дополнительным случайным полем
          * 2.2.1.3. С невалидным параметром "user_action" (уточнить по ТЗ)
              * 2.2.1.3.1. Невалидное значение
              * 2.2.1.3.2. Невалидный тип
          * 2.2.1.4. С невалидным параметром "feedback" (уточнить по ТЗ)
              * 2.2.1.4.1. Невалидное значение
              * 2.2.1.4.2. Невалидный тип
          * 2.2.1.5. Без параметров

      * 2.2.2. User_Agent под mobile
          * 2.2.2.1. Без обязательного параметра "user_action"
          * 2.2.2.2. С дополнительным случайным полем
          * 2.2.2.3. С невалидным параметром "user_action" (уточнить по ТЗ)
              * 2.2.2.3.1. Невалидное значение
              * 2.2.2.3.2. Невалидный тип
          * 2.2.2.4. С невалидным параметром "feedback" (уточнить по ТЗ)
              * 2.2.2.4.1. Невалидное значение
              * 2.2.2.4.2. Невалидный тип
          * 2.2.2.5. Без параметров

  * 2.3. Ограничения (на очищенной базе и перезапущенном сервисе)
      * 2.3.1. Два валидных запроса с одинаковым "user_action"
      * 2.3.2. Два валидных запроса с одинаковыми "user_action" и "feedback"

----

0.1. Подготовить http клиент
  - linux (возможно под mac будет так же работать)
  - bash
  - curl

1.1.1.1. HTTP часть / Валидные запросы / User-Agent под desktop / С параметром "user_action"
  * 1. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"0"}' 127.0.0.1:58001/nps | grep -Pzoq "(200 OK)(.|\n)*({\"status\":\"ok\"})" && echo "pass" || echo "fail"

  * 2. если напечаталось "pass", кейс завершен успешно, дальнейшие шаги не нужно выполнять
  * 3. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"0"}' 127.0.0.1:58001/nps

  * 4. проверить ответ на соответствие:
        * 4.1. HTTP/1.1 200 OK
        * 4.2. {"status":"ok"}


1.1.1.2. HTTP часть / Валидные запросы / User-Agent под desktop / С параметром "user_action" и пустым "feedback"
  * 1. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"0","feedback":""}' 127.0.0.1:58001/nps | grep -Pzoq "(200 OK)(.|\n)*({\"status\":\"ok\"})" && echo "pass" || echo "fail"

  * 2. если напечаталось "pass", кейс завершен успешно, дальнейшие шаги не нужно выполнять
  * 3. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"0","feedback":""}' 127.0.0.1:58001/nps

  * 4. проверить ответ на соответствие:
        * 4.1. HTTP/1.1 200 OK
        * 4.2. {"status":"ok"}


1.1.1.3. HTTP часть / Валидные запросы / User-Agent под desktop / С параметром "user_action" и "feedback"
  * 1. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"1","feedback":"hi"}' 127.0.0.1:58001/nps | grep -Pzoq "(200 OK)(.|\n)*({\"status\":\"ok\"})" && echo "pass" || echo "fail"

  * 2. если напечаталось "pass", кейс завершен успешно, дальнейшие шаги не нужно выполнять
  * 3. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"1","feedback":"hi"}' 127.0.0.1:58001/nps

  * 4. проверить ответ на соответствие:
        * 4.1. HTTP/1.1 200 OK
        * 4.2. {"status":"ok"}


1.1.2.1. HTTP часть / Валидные запросы / User_Agent под mobile / С параметром "user_action"
  * 1. выполнить в коммандной строке:

    ::

        curl -s -i -H "User-Agent: Mozilla/5.0 (Android 7.0; Mobile; rv:60.0) Gecko/60.0" -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"0"}' 127.0.0.1:58001/nps | grep -Pzoq "(200 OK)(.|\n)*({\"status\":\"ok\"})" && echo "pass" || echo "fail"

  * 2. если напечаталось "pass", кейс завершен успешно, дальнейшие шаги не нужно выполнять
  * 3. выполнить в коммандной строке:

    ::

        curl -s -i -H "User-Agent: Mozilla/5.0 (Android 7.0; Mobile; rv:60.0) Gecko/60.0" -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"0"}' 127.0.0.1:58001/nps

  * 4. проверить ответ на соответствие:
        * 4.1. HTTP/1.1 200 OK
        * 4.2. {"status":"ok"}


1.1.2.2. HTTP часть / Валидные запросы / User_Agent под mobile / С параметром "user_action" и пустым "feedback"
  * 1. выполнить в коммандной строке:

    ::

        curl -s -i -H "User-Agent: Mozilla/5.0 (Android 7.0; Mobile; rv:60.0) Gecko/60.0" -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"0","feedback":""}' 127.0.0.1:58001/nps | grep -Pzoq "(200 OK)(.|\n)*({\"status\":\"ok\"})" && echo "pass" || echo "fail"

  * 2. если напечаталось "pass", кейс завершен успешно, дальнейшие шаги не нужно выполнять
  * 3. выполнить в коммандной строке:

    ::

       curl -s -i -H "User-Agent: Mozilla/5.0 (Android 7.0; Mobile; rv:60.0) Gecko/60.0" -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"0","feedback":""}' 127.0.0.1:58001/nps


  * 4. проверить ответ на соответствие:
        * 4.1. HTTP/1.1 200 OK
        * 4.2. {"status":"ok"}


1.1.2.3. HTTP часть / Валидные запросы / User_Agent под mobile / С параметром "user_action" и "feedback"
  * 1. выполнить в коммандной строке:

    ::

        curl -s -i -H "User-Agent: Mozilla/5.0 (Android 7.0; Mobile; rv:60.0) Gecko/60.0" -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"0","feedback":"hi"}' 127.0.0.1:58001/nps | grep -Pzoq "(200 OK)(.|\n)*({\"status\":\"ok\"})" && echo "pass" || echo "fail"

  * 2. если напечаталось "pass", кейс завершен успешно, дальнейшие шаги не нужно выполнять
  * 3. выполнить в коммандной строке:

    ::

       curl -s -i -H "User-Agent: Mozilla/5.0 (Android 7.0; Mobile; rv:60.0) Gecko/60.0" -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"0","feedback":"hi"}' 127.0.0.1:58001/nps


  * 4. проверить ответ на соответствие:
        * 4.1. HTTP/1.1 200 OK
        * 4.2. {"status":"ok"}


1.2.1.1. HTTP часть / Невалидные запросы / User-Agent под desktop / Без обязательного параметра "user_action"
  * 1. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"feedback":"hi"}' 127.0.0.1:58001/nps | grep -Pzoq "400 Bad Request" && echo "pass" || echo "fail"

  * 2. если напечаталось "pass", кейс завершен успешно, дальнейшие шаги не нужно выполнять
  * 3. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"feedback":"hi"}' 127.0.0.1:58001/nps

  * 4. проверить ответ на соответствие:
        * 4.1. HTTP/1.1 400 Bad Request
        * 4.2. TODO: проверять тело ответа, когда будет известен текст ошибки


1.2.1.2. HTTP часть / Невалидные запросы / User-Agent под desktop / С дополнительным случайным полем
  * 1. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"0","rnd":""}' 127.0.0.1:58001/nps | grep -Pzoq "400 Bad Request" && echo "pass" || echo "fail"

  * 2. если напечаталось "pass", кейс завершен успешно, дальнейшие шаги не нужно выполнять
  * 3. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d '{"user_action":"0","rnd":""}' 127.0.0.1:58001/nps

  * 4. проверить ответ на соответствие:
        * 4.1. HTTP/1.1 400 Bad Request
        * 4.2. TODO: проверять тело ответа, когда будет известен текст ошибки


1.2.1.3.1. HTTP часть / Невалидные запросы / User-Agent под desktop / С невалидным параметром "user_action" / Невалидное значение
  * 0. Повторить пункты [1-4] для значений ["-7", "42"]
  * 1. выполнить в коммандной строке:

    ::

        export test_params='{"user_action":"5"}'  # !!! не забыть подставить значение из пункта 0.
        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d $test_params 127.0.0.1:58001/nps | grep -Pzoq "(400 Bad Request)(.|\n)*(Invalid rate)" && echo "pass" || echo "fail"

  * 2. если напечаталось "pass", кейс завершен успешно, дальнейшие шаги не нужно выполнять
  * 3. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d $test_params 127.0.0.1:58001/nps

  * 4. проверить ответ на соответствие:
        * 4.1. HTTP/1.1 400 Bad Request
        * 4.2. {"errors":["Invalid rate"],"status":"error"}


1.2.1.3.2. HTTP часть / Невалидные запросы / User-Agent под desktop / С невалидным параметром "user_action" / Невалидный тип
  * 0. повторить пункты [1-4] для значений [true, "hi", 7, null, "null", {}, [], "", "0.1"]
  * 1. выполнить в коммандной строке:

    ::

        export test_params='{"user_action":"5"}'  # !!! не забыть подставить значение из пункта 0.
        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d $test_params 127.0.0.1:58001/nps | grep -Pzoq "(400 Bad Request)(.|\n)*(invalid use)" && echo "pass" || echo "fail"

  * 2. если напечаталось "pass", кейс завершен успешно, дальнейшие шаги не нужно выполнять
  * 3. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d $test_params 127.0.0.1:58001/nps

  * 4. проверить ответ на соответствие:
        * 4.1. HTTP/1.1 400 Bad Request
        * 4.2. {"errors":["json: invalid use of


1.2.1.4.1. HTTP часть / Невалидные запросы / User-Agent под desktop / С невалидным параметром "feedback" / Невалидное значение
  * 1. выполнить в коммандной строке:

    ::

        export test_params='{"user_action":"5","feedback":"'$(for i in $(seq 256);do echo -n "."; done)'"}'
        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d $test_params 127.0.0.1:58001/nps | grep -Pzoq "(400 Bad Request)(.|\n)*(varying\(255\))" && echo "pass" || echo "fail"

  * 2. если напечаталось "pass", кейс завершен успешно, дальнейшие шаги не нужно выполнять
  * 3. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d $test_params 127.0.0.1:58001/nps

  * 4. проверить ответ на соответствие:
        * 4.1. HTTP/1.1 400 Bad Request
        * 4.2. {"errors":["ERROR #22001 value too long for type character varying(255)"],"status":"error"}


1.2.1.4.2. HTTP часть / Невалидные запросы / User-Agent под desktop / С невалидным параметром "feedback" / Невалидный тип
  * 0. повторить пункты [1-4] для значений [true, 7, null, "null", {}, []] (TODO: под вопросом null, "null")
  * 1. выполнить в коммандной строке:

    ::

        export test_params='{"user_action":"5","feedback":"replace_me"}'  # !!! не забыть подставить значение из пункта 0.
        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d $test_params 127.0.0.1:58001/nps | grep -Pzoq "(400 Bad Request)(.|\n)*(cannot unmarshal)" && echo "pass" || echo "fail"

  * 2. если напечаталось "pass", кейс завершен успешно, дальнейшие шаги не нужно выполнять
  * 3. выполнить в коммандной строке:

    ::

        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d $test_params 127.0.0.1:58001/nps

  * 4. проверить ответ на соответствие:
        * 4.1. HTTP/1.1 400 Bad Request
        * 4.2. {"errors":["json: cannot unmarshal number


1.2.2. HTTP часть / Невалидные запросы / User_Agent под mobile
  * TODO: расписать по аналогии с 1.2.1.


1.2.3. HTTP часть / Невалидные запросы / Список ошибок в ответе
  * 1. выполнить в коммандной строке:

    ::

        export test_params='{"user_action":"42","feedback":"'$(for i in $(seq 256);do echo -n "."; done)'"}'
        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d $test_params 127.0.0.1:58001/nps

  * 2. проверить, что в ответе список ошибок в формате согласно ТЗ


2.0. Подготовить PostgreSQL клиент
  - psql  (как вариант)

    ::

          # параметры сети и хоста подключение в зависимости от:
          docker run --network="host" -it --rm -e PGPASSWORD=devpass postgres:alpine psql -h 127.0.0.1 -U postgres -d core -p5433


2.1.1.1. БД часть / Валидные запросы / User-Agent под desktop / С параметром "user_action"
  * 0. повторить пункты [1-4] для значений ["0", "6", "10"]
  * 1. выполнить в коммандной строке:

    ::

        export test_params='{"user_action":""}'  # !!! не забыть подставить значение из пункта 0.
        curl -s -i -H "Content-Type: application/json; charset=utf-8" -X POST -d $test_params 127.0.0.1:58001/nps

  * 2. выполнить в psql:

    ::

        select * from t_feedback_models;

  * 3. проверить:
        * 3.1. добавилась новая запись
        * 3.2. в поле "result" значение из "user_action"
        * 3.3. в поле "feedback" нет данных (where feedback is NULL)
        * 3.4. в поле "device" значение "desktop"
  * 4. выполнить в psql:

    ::

       delete from t_feedback_models;


2.1.1.2. БД часть / Валидные запросы / User-Agent под desktop / С параметром "user_action" и пустым "feedback"
  TODO: расписать (по аналогии с 2.1.1.1. с учетом параметров и проверок под этот кейс)

TODO: дописать кейсы (по аналогии)
